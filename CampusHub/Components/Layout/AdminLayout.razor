@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using CurrieTechnologies.Razor.SweetAlert2
@inject SweetAlertService Swal

<div class="flex h-screen overflow-hidden">
    <aside class="flex flex-col bg-white border-r border-gray-200 w-64 shrink-0" style="min-width: 256px">
        <div class="flex flex-col h-full">
            <div class="flex items-center gap-3 px-5 py-4 border-b border-gray-200">
                <img src="images/UCC_logo.png" alt="University Logo" class="logo-img">
                <div>
                    <h1 class="text-sm font-semibold text-gray-900 leading-tight">Campus Hub</h1>
                    <p class="text-xs text-gray-400 leading-tight">Admin Portal</p>
                </div>
            </div>

            <nav class="flex-1 overflow-y-auto px-5 py-6 text-xs text-gray-400 font-light select-none">
                <div class="mb-6">
                    <p class="uppercase mb-3 tracking-wide font-semibold text-gray-400">Overview</p>
                    <ul class="space-y-3">
                        <li>
                            <a href="/admin/dashboard" class="@GetNavLinkClass("/admin/dashboard")">
                                <i class="fas fa-chart-bar text-[14px]"></i>
                                Dashboard
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="mb-6">
                    <p class="uppercase mb-3 tracking-wide font-semibold text-gray-400">Management</p>
                    <ul class="space-y-3">
                        <li>
                            <a href="/admin/users" class="@GetNavLinkClass("/admin/users")">
                                <i class="fas fa-users text-[14px]"></i>
                                User Management
                            </a>
                        </li>
                        <li>
                            <a href="/admin/reports" class="@GetNavLinkClass("/admin/reports")">
                                <i class="far fa-flag text-[14px]"></i>
                                Reports
                            </a>
                        </li>
                        <li>
                            <a href="/admin/marketplace" class="@GetNavLinkClass("/admin/marketplace")">
                                <i class="fas fa-shopping-bag text-[14px]"></i>
                                Marketplace
                            </a>
                        </li>
                        <li>
                            <a href="/admin/events" class="@GetNavLinkClass("/admin/events")" aria-current="@(IsCurrentPage("/admin/events") ? "page" : null)">
                                <i class="fas fa-calendar-alt text-[14px]"></i>
                                Event Management
                            </a>
                        </li>
                    </ul>
                </div>

                <div>
                    <p class="uppercase mb-3 tracking-wide font-semibold text-gray-400">System</p>
                    <ul class="space-y-3">
                        <li>
                            <a href="/admin/settings" class="@GetNavLinkClass("/admin/settings")">
                                <i class="fas fa-cog text-[14px]"></i>
                                Settings
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <div class="flex items-center gap-3 bg-gray-100 rounded-lg p-3 m-5 select-none" style="min-height: 56px">
                <div class="w-8 h-8 rounded-full bg-[#7ED957] flex items-center justify-center text-white font-semibold text-xs" aria-label="User initials @adminInitials">
                    @adminInitials
                </div>
                <div class="flex flex-col text-xs font-semibold text-gray-900 leading-tight">
                    <span>@adminName</span>
                    <span class="bg-gray-200 rounded-full px-2 py-0.5 font-normal text-gray-600 mt-0.5">@adminRole</span>
                </div>
            </div>
        </div>
    </aside>

    <main class="flex-1 flex flex-col overflow-hidden">
        <header class="flex items-center justify-between border-b border-gray-200 px-6 py-3 shrink-0">
            <div>
                <h2 class="text-sm font-semibold text-gray-900 leading-tight">Campus Hub Admin</h2>
                <p class="text-xs text-gray-500 leading-tight">University Management Portal</p>
            </div>
            <div class="flex items-center gap-3">
                <div class="relative">
                    <div @onclick="ToggleDropdown" class="w-8 h-8 rounded-full bg-[#7ED957] flex items-center justify-center text-white font-semibold text-xs cursor-pointer" aria-label="User initials @adminInitials">
                        @adminInitials
                    </div>
                    @if (isDropdownOpen)
                    {
                        <div class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-gray-200">
                            <div @onclick="Logout" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer">
                                Logout
                            </div>
                        </div>
                    }
                </div>
                <span class="text-sm font-semibold text-gray-900">@adminTitle</span>
            </div>
        </header>

        <section class="flex-1 overflow-y-auto px-6 py-6">
            @Body
        </section>
    </main>
</div>

@code {
    private string adminName = "Dr. Maria Santos";
    private string adminRole = "System Administrator";
    private string adminTitle = "Dr.";
    private string adminInitials = "DMS";
    private bool isDropdownOpen = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var fullName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "fullName");
            var role = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "role");

            if (!string.IsNullOrEmpty(fullName))
            {
                adminName = fullName;
                adminInitials = GetInitials(fullName);

                var nameParts = fullName.Split(' ');
                adminTitle = nameParts.Length > 0 ? nameParts[0] : "Admin";
            }

            if (!string.IsNullOrEmpty(role))
            {
                adminRole = role;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading admin info: {ex.Message}");
        }
    }

    private async Task ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private async Task Logout()
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure you want to logout?",
                Text = "This will end your admin session.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, logout!",
                CancelButtonText = "Cancel",
                ConfirmButtonColor = "#7ED957",
                CancelButtonColor = "#d33",
                ReverseButtons = true
            });

            if (!result.IsConfirmed) return;

            await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            var fallbackConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to logout?");
            if (fallbackConfirmed)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.clear");
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
            Console.WriteLine($"Logout SweetAlert error: {ex.Message}");
        }
        finally
        {
            isDropdownOpen = false;
        }
    }

    private string GetInitials(string fullName)
    {
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return parts.Length > 0 ? parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper() : "AD";
    }

    private bool IsCurrentPage(string path)
    {
        return NavigationManager.Uri.Contains(path, StringComparison.OrdinalIgnoreCase);
    }

    private string GetNavLinkClass(string path)
    {
        if (IsCurrentPage(path))
        {
            return "flex items-center gap-2 bg-[#7ED957] text-white rounded-md px-3 py-2";
        }
        return "flex items-center gap-2 text-gray-900 font-semibold";
    }
}