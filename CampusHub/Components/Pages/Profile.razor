@page "/profile"
@layout Layout.MainLayout
@rendermode InteractiveServer
@using CampusHub.Application.DTO
@using CampusHub.Application.DTOs
@using CampusHub.Application.Interfaces
@using CampusHub.Domain.Entities
@using CurrieTechnologies.Razor.SweetAlert2
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IUserService UserService
@inject IMarketplaceService MarketplaceService
@inject IEventService EventService
@using Microsoft.JSInterop;
@inject SweetAlertService Swal



<div id="profile-content" class="tab-content active">
    <div class="profile-container">
        <div class="profile-header">
            <div class="profile-title">
                <h2>My Profile</h2>
                <p class="profile-subtitle">View and manage your account information and listings</p>
            </div>
        </div>

        <!-- Nav Tab -->
        <div class="profile-tabs">
            <button class="profile-tab @(activeTab == "info" ? "active" : "")"
                    @onclick="@(() => ShowProfileTab("info"))">
                Profile Info
            </button>
            <button class="profile-tab @(activeTab == "listings" ? "active" : "")"
                    @onclick="@(() => ShowProfileTab("listings"))">
                My Listings
            </button>
            <button class="profile-tab @(activeTab == "liked" ? "active" : "")"
                    @onclick="@(() => ShowProfileTab("liked"))">
                Liked Items (@likedItems.Count)
            </button>
            <button class="profile-tab @(activeTab == "events" ? "active" : "")"
                    @onclick="@(() => ShowProfileTab("events"))">
                Bookmarked Events (@bookmarkedEvents.Count)
            </button>
        </div>

        @if (currentUser != null)
        {
            <!-- Profile Info -->
            <div id="profile-info" style="display: @(activeTab == "info" ? "block" : "none")">
                <div class="profile-card">
                    <div class="profile-card-header">
                        <h3>Profile Information</h3>
                        <p class="card-description">Your basic account information and details</p>
                    </div>
                    <div class="profile-card-content">
                        <div class="profile-main">
                            <div class="profile-avatar-section">
                                <div class="profile-avatar">
                                    @if (!string.IsNullOrEmpty(currentUser.ProfilePictureUrl))
                                    {
                                        <img src="@currentUser.ProfilePictureUrl" alt="Profile Picture" />
                                    }
                                    else
                                    {
                                        <span>@GetInitials(currentUser.FullName)</span>
                                    }
                                </div>
                                <div class="profile-basic-info">
                                    <h3>@currentUser.FullName</h3>
                                    <div class="profile-badges">
                                        <span class="badge badge-outline">@currentUser.StudentNumber</span>
                                        <span class="badge badge-secondary">@currentUser.YearLevel</span>
                                    </div>
                                    <p class="profile-program">@currentUser.Program</p>
                                </div>
                            </div>

                            @if (!isEditMode)
                            {
                                <button class="btn btn-outline btn-profile" @onclick="EnableEditMode">
                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
                                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
                                    </svg>
                                    Edit Profile
                                </button>
                            }
                            else
                            {
                                <div class="edit-actions">
                                    <button class="btn btn-primary btn-profile" @onclick="SaveProfile" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner"></span>
                                        }
                                        else
                                        {
                                            <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                <polyline points="20,6 9,17 4,12" />
                                            </svg>
                                        }
                                        @(isSaving ? "Saving..." : "Save Changes")
                                    </button>
                                    <button class="btn btn-outline btn-profile" @onclick="CancelEdit">
                                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <line x1="18" y1="6" x2="6" y2="18" />
                                            <line x1="6" y1="6" x2="18" y2="18" />
                                        </svg>
                                        Cancel
                                    </button>
                                </div>
                            }

                            <!-- Show validation messages -->
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-error">
                                    @errorMessage
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success">
                                    @successMessage
                                </div>
                            }

                            <div class="profile-form">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Full Name</label>
                                        @if (isEditMode)
                                        {
                                            <input type="text" @bind="editUser.FullName" @bind:event="oninput" class="@(validationErrors.ContainsKey("FullName") ? "error" : "")">
                                            @if (validationErrors.ContainsKey("FullName"))
                                            {
                                                <span class="error-text">@validationErrors["FullName"]</span>
                                            }
                                        }
                                        else
                                        {
                                            <input type="text" value="@currentUser.FullName" readonly>
                                        }
                                    </div>
                                    <div class="form-group">
                                        <label>Student Number</label>
                                        @if (isEditMode)
                                        {
                                            <input type="text" @bind="editUser.StudentNumber" @bind:event="oninput" class="@(validationErrors.ContainsKey("StudentNumber") ? "error" : "")">
                                            @if (validationErrors.ContainsKey("StudentNumber"))
                                            {
                                                <span class="error-text">@validationErrors["StudentNumber"]</span>
                                            }
                                        }
                                        else
                                        {
                                            <input type="text" value="@currentUser.StudentNumber" readonly>
                                        }
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Email Address</label>
                                        @if (isEditMode)
                                        {
                                            <input type="email" @bind="editUser.Email" @bind:event="oninput" class="@(validationErrors.ContainsKey("Email") ? "error" : "")">
                                            @if (validationErrors.ContainsKey("Email"))
                                            {
                                                <span class="error-text">@validationErrors["Email"]</span>
                                            }
                                        }
                                        else
                                        {
                                            <input type="email" value="@currentUser.Email" readonly>
                                        }
                                    </div>
                                    <div class="form-group">
                                        <label>Phone Number</label>
                                        @if (isEditMode)
                                        {
                                            <input type="text" @bind="editUser.ContactNumber" @bind:event="oninput">
                                        }
                                        else
                                        {
                                            <input type="text" value="@(currentUser.ContactNumber ?? "")" readonly>
                                        }
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Program</label>
                                        @if (isEditMode)
                                        {
                                            <input type="text" @bind="editUser.Program" @bind:event="oninput" class="@(validationErrors.ContainsKey("Program") ? "error" : "")">
                                            @if (validationErrors.ContainsKey("Program"))
                                            {
                                                <span class="error-text">@validationErrors["Program"]</span>
                                            }
                                        }
                                        else
                                        {
                                            <input type="text" value="@currentUser.Program" readonly>
                                        }
                                    </div>
                                    <div class="form-group">
                                        <label>Year Level</label>
                                        @if (isEditMode)
                                        {
                                            <input type="text" @bind="editUser.YearLevel" @bind:event="oninput" class="@(validationErrors.ContainsKey("YearLevel") ? "error" : "")">
                                            @if (validationErrors.ContainsKey("YearLevel"))
                                            {
                                                <span class="error-text">@validationErrors["YearLevel"]</span>
                                            }
                                        }
                                        else
                                        {
                                            <input type="text" value="@currentUser.YearLevel" readonly>
                                        }
                                    </div>
                                </div>
                                <div class="join-date">
                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
                                        <line x1="16" y1="2" x2="16" y2="6" />
                                        <line x1="8" y1="2" x2="8" y2="6" />
                                        <line x1="3" y1="10" x2="21" y2="10" />
                                    </svg>
                                    Joined @currentUser.CreatedAt.ToString("MMMM dd, yyyy")
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Listings -->
            <div id="profile-listings" style="display: @(activeTab == "listings" ? "block" : "none")">
                <div class="listings-stats">
                    <div class="stat-card">
                        <div class="stat-content">
                            <svg class="stat-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" />
                                <polyline points="3.27,6.96 12,12.01 20.73,6.96" />
                                <line x1="12" y1="22.08" x2="12" y2="12" />
                            </svg>
                            <div class="stat-info">
                                <div class="stat-number">@userListings.Count</div>
                                <div class="stat-label">Total Listings</div>
                            </div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-content">
                            <svg class="stat-icon green" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z" />
                                <line x1="3" y1="6" x2="21" y2="6" />
                                <path d="M16 10a4 4 0 0 1-8 0" />
                            </svg>
                            <div class="stat-info">
                                <div class="stat-number">@soldItemsCount</div>
                                <div class="stat-label">Items Sold</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Show listing edit messages -->
                @if (!string.IsNullOrEmpty(listingErrorMessage))
                {
                    <div class="alert alert-error">
                        @listingErrorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(listingSuccessMessage))
                {
                    <div class="alert alert-success">
                        @listingSuccessMessage
                    </div>
                }

                @if (activeListings.Any())
                {
                    <div class="listings-section">
                        <h3>Active Listings (@activeListings.Count)</h3>
                        <div class="marketplace-grid">
                            @foreach (var listing in activeListings)
                            {
                                <div class="marketplace-card owner-card">
                                    <div class="item-image">
                                        <img src="@(!string.IsNullOrEmpty(listing.ImageUrl) ? listing.ImageUrl : "/images/placeholder.jpg")" alt="@listing.Title">
                                        <div class="item-badges">
                                            <span class="badge badge-secondary">@listing.Condition</span>
                                        </div>
                                    </div>
                                    <div class="item-content">
                                        <div class="item-header">
                                            <h3 class="item-title">@listing.Title</h3>
                                            <p class="item-price">₱@listing.Price.ToString("N2")</p>
                                        </div>
                                        <p class="item-description">@listing.Description</p>
                                        <div class="item-meta">
                                            <div class="item-location">
                                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z" />
                                                    <circle cx="12" cy="10" r="3" />
                                                </svg>
                                                @GetMeetupPreferenceName(listing.MeetupPreference)
                                            </div>
                                            <div class="item-date">
                                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                    <circle cx="12" cy="12" r="10" />
                                                    <polyline points="12,6 12,12 16,14" />
                                                </svg>
                                                @GetTimeAgo(listing.CreatedAt)
                                            </div>
                                        </div>
                                        <div class="item-footer">
                                            <span class="item-seller">By @(listing.Seller?.FullName ?? "Unknown")</span>
                                            <div class="owner-actions">
                                                <button class="btn btn-outline btn-sm" @onclick="() => ShowEditPopup(listing)">
                                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
                                                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
                                                    </svg>
                                                    Edit
                                                </button>
                                                <button class="btn btn-outline btn-sm" @onclick="() => MarkAsSold(listing.Id)">
                                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                        <polyline points="20,6 9,17 4,12" />
                                                    </svg>
                                                    Mark Sold
                                                </button>
                                                <button class="btn btn-outline btn-sm btn-danger" @onclick="() => DeleteListing(listing.Id)">
                                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                        <polyline points="3 6 5 6 21 6" />
                                                        <path d="M19 6L17 20H7L5 6m5-4h4a1 1 0 0 1 1 1v3H9V3a1 1 0 0 1 1-1z" />
                                                    </svg>
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <p>No active listings found.</p>
                    </div>
                }

                @if (soldListings.Any())
                {
                    <div class="listings-section">
                        <h3>Sold Items (@soldListings.Count)</h3>
                        <div class="marketplace-grid">
                            @foreach (var listing in soldListings)
                            {
                                <div class="marketplace-card sold-item">
                                    <div class="item-image">
                                        <img src="@(!string.IsNullOrEmpty(listing.ImageUrl) ? listing.ImageUrl : "/images/placeholder.jpg")" alt="@listing.Title">
                                        <div class="item-badges">
                                            <span class="badge badge-secondary">@listing.Condition</span>
                                            <span class="badge badge-destructive">SOLD</span>
                                        </div>
                                    </div>
                                    <div class="item-content">
                                        <div class="item-header">
                                            <h3 class="item-title sold-title">@listing.Title</h3>
                                            <p class="item-price sold-price">₱@listing.Price.ToString("N2")</p>
                                        </div>
                                        <p class="item-description">@listing.Description</p>
                                        <div class="item-meta">
                                            <div class="item-location">
                                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z" />
                                                    <circle cx="12" cy="10" r="3" />
                                                </svg>
                                                @GetMeetupPreferenceName(listing.MeetupPreference)
                                            </div>
                                            <div class="item-date">
                                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                    <circle cx="12" cy="12" r="10" />
                                                    <polyline points="12,6 12,12 16,14" />
                                                </svg>
                                                @GetTimeAgo(listing.UpdatedAt ?? listing.CreatedAt)
                                            </div>
                                        </div>
                                        <div class="item-footer">
                                            <span class="item-seller">By @(listing.Seller?.FullName ?? "Unknown")</span>
                                            <div class="owner-actions">
                                                <button class="btn btn-outline btn-sm" @onclick="() => MarkAsAvailable(listing.Id)">
                                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                        <line x1="18" y1="6" x2="6" y2="18" />
                                                        <line x1="6" y1="6" x2="18" y2="18" />
                                                    </svg>
                                                    Mark Available
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Liked Items section -->
            <div id="profile-liked" style="display: @(activeTab == "liked" ? "block" : "none")">
                <div class="listings-stats">
                    <div class="stat-card">
                        <div class="stat-content">
                            <svg class="stat-icon red" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" />
                            </svg>
                            <div class="stat-info">
                                <div class="stat-number">@likedItems.Count</div>
                                <div class="stat-label">Liked Items</div>
                            </div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-content">
                            <svg class="stat-icon blue" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.29 1.51 4.04 3 5.5l7 7 7-7z" />
                            </svg>
                            <div class="stat-info">
                                <div class="stat-number">@availableLikedItems</div>
                                <div class="stat-label">Available Items</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Show liked items messages -->
                @if (!string.IsNullOrEmpty(likedErrorMessage))
                {
                    <div class="alert alert-error">
                        @likedErrorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(likedSuccessMessage))
                {
                    <div class="alert alert-success">
                        @likedSuccessMessage
                    </div>
                }

                @if (likedItems.Any())
                {
                    <div class="listings-section">
                        <h3>Liked Items (@likedItems.Count)</h3>
                        <div class="marketplace-grid">
                            @foreach (var item in likedItems)
                            {
                                <div class="marketplace-card liked-item">
                                    <div class="item-image">
                                        <img src="@(!string.IsNullOrEmpty(item.ImageUrl) ? item.ImageUrl : "/images/placeholder.jpg")" alt="@item.Title">
                                        <div class="item-badges">
                                            <span class="badge badge-secondary">@item.Condition</span>
                                            @if (item.Status == MarketplaceItemStatus.Sold)
                                            {
                                                <span class="badge badge-destructive">SOLD</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-primary">AVAILABLE</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="item-content">
                                        <div class="item-header">
                                            <h3 class="item-title">@item.Title</h3>
                                            <p class="item-price">₱@item.Price.ToString("N2")</p>
                                        </div>
                                        <p class="item-description">@item.Description</p>
                                        <div class="item-meta">
                                            <div class="item-location">
                                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z" />
                                                    <circle cx="12" cy="10" r="3" />
                                                </svg>
                                                @GetMeetupPreferenceName(item.MeetupPreference)
                                            </div>
                                            <div class="item-date">
                                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                    <circle cx="12" cy="12" r="10" />
                                                    <polyline points="12,6 12,12 16,14" />
                                                </svg>
                                                @GetTimeAgo(item.CreatedAt)
                                            </div>
                                        </div>
                                        <div class="item-footer">
                                            <span class="item-seller">By @item.SellerName</span>
                                            <div class="liked-item-actions">
                                                <button class="btn btn-outline btn-sm btn-heart" @onclick="() => RemoveFromLikes(item.Id)">
                                                    <svg class="icon filled" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor">
                                                        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" />
                                                    </svg>
                                                    Remove
                                                </button>
                                                @if (item.Status != MarketplaceItemStatus.Sold && item.SellerId != currentUser.Id)
                                                {
                                                    <button class="btn btn-primary btn-sm">
                                                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z" />
                                                            <polyline points="22,6 12,13 2,6" />
                                                        </svg>
                                                        Contact Seller
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" />
                            </svg>
                        </div>
                        <h3>No Liked Items Yet</h3>
                        <p>Items you like from the marketplace will appear here. Start browsing to build your wishlist!</p>
                    </div>
                }
            </div>

            <!-- Bookmarked Events section -->
            <div id="profile-events" style="display: @(activeTab == "events" ? "block" : "none")">
                <div class="listings-stats">
                    <div class="stat-card">
                        <div class="stat-content">
                            <svg class="stat-icon purple" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
                                <line x1="16" y1="2" x2="16" y2="6" />
                                <line x1="8" y1="2" x2="8" y2="6" />
                                <line x1="3" y1="10" x2="21" y2="10" />
                                <path d="M8 14l2 2 4-4" />
                            </svg>
                            <div class="stat-info">
                                <div class="stat-number">@bookmarkedEvents.Count</div>
                                <div class="stat-label">Bookmarked Events</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Show events messages -->
                @if (!string.IsNullOrEmpty(eventsErrorMessage))
                {
                    <div class="alert alert-error">
                        @eventsErrorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(eventsSuccessMessage))
                {
                    <div class="alert alert-success">
                        @eventsSuccessMessage
                    </div>
                }

                @if (bookmarkedEvents.Any())
                {
                    <div class="listings-section">
                        <h3>Bookmarked Events (@bookmarkedEvents.Count)</h3>
                        <div>
                            @foreach (var eventItem in bookmarkedEvents)
                            {
                                <article class="border border-gray-200 rounded-lg p-4 mb-6 relative flex flex-col md:flex-row md:space-x-4" style="border-left: 3px solid #84cc16">
                                    <img alt="@eventItem.Title"
                                         class="w-24 h-24 rounded-md object-cover mb-3 md:mb-0"
                                         src="@GetEventImagePath(eventItem.ImagePath)" />

                                    <div class="flex-1 flex flex-col">
                                        <div class="flex flex-wrap gap-1 mb-1">
                                            <span class="@GetEventPriorityClass(eventItem.Priority)">
                                                <i class="fas fa-check-circle text-[8px]"></i>
                                                @eventItem.Priority
                                            </span>
                                            <span class="text-[10px] font-normal border border-gray-300 rounded-full px-2 py-0.5">
                                                @eventItem.Type
                                            </span>
                                            <span class="@GetEventStatusBadge(eventItem.Status)">
                                                @eventItem.Status
                                            </span>
                                        </div>

                                        <h2 class="text-sm font-semibold text-gray-900 mb-1">@eventItem.Title</h2>

                                        <div class="flex flex-wrap items-center gap-2 text-xs text-gray-500 mb-2">
                                            <span class="@GetEventCollegeBadgeClass(eventItem.CollegeId)">
                                                <i class="fas fa-graduation-cap text-[10px]"></i>
                                                @eventItem.CollegeName
                                            </span>

                                            @if (!string.IsNullOrEmpty(eventItem.ProgramName))
                                            {
                                                <span class="text-[10px] bg-gray-100 text-gray-600 rounded-md px-2 py-0.5">
                                                    @eventItem.ProgramName
                                                </span>
                                            }

                                            <span class="@GetEventCampusBadgeClass(eventItem.CampusLocationId)">
                                                <i class="fas fa-university text-[10px]"></i>
                                                @eventItem.CampusLocationName
                                            </span>

                                            <span class="flex items-center gap-1">
                                                <i class="far fa-calendar-alt text-xs"></i>
                                                @eventItem.StartDate.ToString("MMMM dd, yyyy") - @eventItem.EndDate.ToString("MMMM dd, yyyy")
                                            </span>
                                        </div>

                                        <p class="text-xs text-gray-600 mb-3 leading-relaxed">@eventItem.Description</p>

                                        <div class="flex flex-wrap items-center gap-4 text-xs text-gray-500">
                                            <span class="flex items-center gap-1 truncate max-w-[220px]">
                                                <i class="fas fa-map-marker-alt text-[10px]"></i>
                                                @eventItem.Location
                                            </span>
                                            <span class="flex items-center gap-1">
                                                <i class="fas fa-user-friends text-[10px]"></i>
                                                @eventItem.InterestedCount interested
                                            </span>
                                            @if (eventItem.RegistrationDeadline.HasValue)
                                            {
                                                <span class="text-red-600 flex items-center gap-1">
                                                    <i class="fas fa-clock text-[10px]"></i>
                                                    Registration Date: @eventItem.RegistrationDeadline.Value.ToString("MMMM dd, yyyy")
                                                </span>
                                            }
                                        </div>
                                    </div>

                                    <div class="flex flex-col justify-between ml-auto mt-2 md:mt-0 space-y-2">
                                        <button @onclick="() => ToggleBookmark(eventItem.Id)"
                                                aria-label="Bookmark event"
                                                class="border border-gray-300 rounded-md p-1 text-gray-600 hover:text-lime-500">
                                            <i class="@(eventItem.IsBookmarked ? "fas fa-bookmark text-lime-500" : "far fa-bookmark")"></i>
                                        </button>
                                        <button @onclick="@(() => ShowEventModal(eventItem))"
                                                aria-label="Expand event"
                                                class="text-gray-600 hover:text-gray-900">
                                            <i class="fas fa-expand"></i>
                                        </button>
                                    </div>
                                </article>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
                                <line x1="16" y1="2" x2="16" y2="6" />
                                <line x1="8" y1="2" x2="8" y2="6" />
                                <line x1="3" y1="10" x2="21" y2="10" />
                                <path d="M8 14l2 2 4-4" />
                            </svg>
                        </div>
                        <h3>No Bookmarked Events Yet</h3>
                        <p>Events you bookmark from the events page will appear here. Start exploring events to build your bookmarks!</p>
                    </div>
                }
            </div>

            @if (showEditPopup)
            {
                <div class="modal-overlay" @onclick="CloseEditPopup">
                    <div class="modal-container" @onclick:stopPropagation="true">
                        <div class="modal-header">
                            <h3>Edit Listing</h3>
                            <button class="modal-close-btn" @onclick="CloseEditPopup">
                                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                    <line x1="18" y1="6" x2="6" y2="18" />
                                    <line x1="6" y1="6" x2="18" y2="18" />
                                </svg>
                            </button>
                        </div>

                        <div class="modal-body">
                            @if (!string.IsNullOrEmpty(listingErrorMessage))
                            {
                                <div class="alert alert-error">
                                    @listingErrorMessage
                                </div>
                            }

                            <div class="edit-listing-form">
                                <div class="form-group">
                                    <label>Title</label>
                                    <input type="text" @bind="editingListing.Title" @bind:event="oninput"
                                           class="@(listingValidationErrors.ContainsKey("Title") ? "error" : "")" />
                                    @if (listingValidationErrors.ContainsKey("Title"))
                                    {
                                        <span class="error-text">@listingValidationErrors["Title"]</span>
                                    }
                                </div>

                                <div class="form-group">
                                    <label>Description</label>
                                    <textarea @bind="editingListing.Description" @bind:event="oninput"
                                              class="@(listingValidationErrors.ContainsKey("Description") ? "error" : "")"
                                              rows="4"></textarea>
                                    @if (listingValidationErrors.ContainsKey("Description"))
                                    {
                                        <span class="error-text">@listingValidationErrors["Description"]</span>
                                    }
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Price (₱)</label>
                                        <input type="number" @bind="editingListing.Price" @bind:event="oninput"
                                               class="@(listingValidationErrors.ContainsKey("Price") ? "error" : "")"
                                               step="0.01" min="0.01" />
                                        @if (listingValidationErrors.ContainsKey("Price"))
                                        {
                                            <span class="error-text">@listingValidationErrors["Price"]</span>
                                        }
                                    </div>
                                    <div class="form-group">
                                        <label>Condition</label>
                                        <select @bind="editingListing.Condition">
                                            @foreach (ItemCondition condition in Enum.GetValues<ItemCondition>())
                                            {
                                                <option value="@condition">@condition</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Category</label>
                                        <select @bind="editingListing.Category">
                                            @foreach (ItemCategory category in Enum.GetValues<ItemCategory>())
                                            {
                                                <option value="@category">@GetCategoryDisplayName(category)</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Meetup Preference</label>
                                        <select @bind="editingListing.MeetupPreference">
                                            @foreach (MeetupPreference pref in Enum.GetValues<MeetupPreference>())
                                            {
                                                <option value="@pref">@GetMeetupPreferenceName(pref)</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Image URL (optional)</label>
                                    <input type="url" @bind="editingListing.ImageUrl" @bind:event="oninput" />
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-outline" @onclick="CloseEditPopup">Cancel</button>
                            <button class="btn btn-primary" @onclick="SaveListingEdit" disabled="@isEditingListing">
                                @if (isEditingListing)
                                {
                                    <span class="spinner"></span>
                                    <span>Saving...</span>
                                }
                                else
                                {
                                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <polyline points="20,6 9,17 4,12" />
                                    </svg>
                                    <span>Save Changes</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            }

            @if (showModal)
            {
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" @onclick="CloseModal">
                    <div class="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
                        <div class="sticky top-0 bg-white border-b px-6 py-4 flex justify-between items-center">
                            <h2 class="text-xl font-bold">@selectedEvent?.Title</h2>
                            <button @onclick="CloseModal" class="text-gray-500 hover:text-gray-700">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>

                        <div class="p-6">
                            <div class="text-center mb-4">
                                <img src="@GetEventImagePath(selectedEvent?.ImagePath)" alt="@selectedEvent?.Title" class="max-h-96 mx-auto rounded-lg shadow-lg" />
                            </div>

                            <div class="flex gap-2 mb-4">
                                <span class="@GetEventPriorityClass(selectedEvent?.Priority)">
                                    <i class="fas fa-check-circle text-[8px]"></i> @selectedEvent?.Priority Priority
                                </span>
                                <span class="text-[10px] font-normal border border-gray-300 rounded-full px-2 py-0.5">
                                    @selectedEvent?.Type
                                </span>
                                <span class="@GetEventCollegeBadgeClass(selectedEvent?.CollegeId ?? 0)">
                                    <i class="fas fa-graduation-cap text-[10px]"></i> @selectedEvent?.CollegeName
                                </span>
                                <span class="@GetEventCampusBadgeClass(selectedEvent?.CampusLocationId ?? 0)">
                                    <i class="fas fa-university text-[10px]"></i> @selectedEvent?.CampusLocationName
                                </span>
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <h3 class="font-bold text-sm mb-1">Campus</h3>
                                    <p class="text-sm">
                                        <i class="fas fa-university"></i> @selectedEvent?.CampusLocationName
                                    </p>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedEvent?.ProgramName))
                                {
                                    <div>
                                        <h3 class="font-bold text-sm mb-1">Program</h3>
                                        <p class="text-sm">@selectedEvent?.ProgramName</p>
                                    </div>
                                }
                                <div>
                                    <h3 class="font-bold text-sm mb-1">Date</h3>
                                    <p class="text-sm"><i class="far fa-calendar-alt"></i> @selectedEvent?.StartDate.ToString("MMMM dd, yyyy") - @selectedEvent?.EndDate.ToString("MMMM dd, yyyy")</p>
                                </div>
                            </div>

                            <div class="mb-4">
                                <h3 class="font-bold text-sm mb-1">Location</h3>
                                <p class="text-sm"><i class="fas fa-map-marker-alt"></i> @selectedEvent?.Location</p>
                            </div>

                            <div class="mb-4">
                                <h3 class="font-bold text-sm mb-1">Description</h3>
                                <p class="text-sm">@selectedEvent?.Description</p>
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <h3 class="font-bold text-sm mb-1">Interest</h3>
                                    <p class="text-sm"><i class="fas fa-user-friends"></i> @selectedEvent?.InterestedCount people interested</p>
                                </div>
                                @if (selectedEvent?.RegistrationDeadline.HasValue == true)
                                {
                                    <div>
                                        <h3 class="font-bold text-sm mb-1">Registration Deadline</h3>
                                        <p class="text-sm text-red-600">
                                            <i class="fas fa-clock"></i> @selectedEvent?.RegistrationDeadline.Value.ToString("MMMM dd, yyyy")
                                        </p>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="sticky bottom-0 bg-white border-t px-6 py-4 flex justify-end gap-2">
                            <button @onclick="CloseModal" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                                Close
                            </button>
                            @if (selectedEvent != null && currentUserId != 0)
                            {
                                <button @onclick="@(() => ToggleBookmark(selectedEvent.Id))"
                                        class="px-4 py-2 @(selectedEvent.IsBookmarked ? "bg-gray-400" : "bg-lime-500") text-white rounded-md hover:@(selectedEvent.IsBookmarked ? "bg-gray-500" : "bg-lime-600")">
                                    <i class="@(selectedEvent.IsBookmarked ? "fas fa-bookmark" : "far fa-bookmark")"></i>
                                    @(selectedEvent.IsBookmarked ? "Bookmarked" : "Bookmark Event")
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="loading-spinner">Loading profile...</div>
        }
    </div>
</div>

@code {
    private string activeTab = "info";
    private CurrentUserDto? currentUser;
    private UpdateUserProfileDto editUser = new();
    private List<MarketplaceItemDto> userListings = new();
    private List<MarketplaceItemDto> activeListings = new();
    private List<MarketplaceItemDto> soldListings = new();
    private List<MarketplaceItemDto> likedItems = new();
    private int soldItemsCount = 0;
    private int availableLikedItems = 0;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string? errorMessage;
    private string? successMessage;
    private Dictionary<string, string> validationErrors = new();

    private bool showEditPopup = false;
    private UpdateMarketplaceItemDto editingListing = new();
    private bool isEditingListing = false;
    private string? listingErrorMessage;
    private string? listingSuccessMessage;
    private Dictionary<string, string> listingValidationErrors = new();

    private string? likedErrorMessage;
    private string? likedSuccessMessage;

    private List<EventDto> bookmarkedEvents = new();
    private string? eventsErrorMessage;
    private string? eventsSuccessMessage;
    private EventDto? selectedEvent = null;
    private bool showModal = false;
    private int currentUserId = 0;

    [JSInvokable]
    public static Task CloseAllMenus()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await LoadUserProfile();
                await LoadUserListings();
                await LoadUserLikedItems();
                await LoadBookmarkedEvents();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
                errorMessage = "Failed to load profile data. Please refresh the page.";
                StateHasChanged();
            }
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            Console.WriteLine("=== LoadUserProfile START ===");

            var userIdString = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");
            Console.WriteLine($"UserId from session: '{userIdString}'");

            if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out int userId))
            {
                currentUserId = userId;
                Console.WriteLine($"Calling UserService.GetUserByIdAsync for userId: {userId}");
                currentUser = await UserService.GetUserByIdAsync(userId);
                Console.WriteLine($"UserService returned: {(currentUser != null ? currentUser.FullName : "NULL")}");
            }
            else
            {
                Console.WriteLine("UserId is null or failed to parse");
            }

            if (currentUser == null)
            {
                Console.WriteLine("currentUser is null, trying session storage fallback...");

                var fullName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "fullName");
                var email = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "email");
                var program = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "program");
                var yearLevel = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "yearLevel");
                var campus = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "campusLocation");
                var studentNumber = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "studentNumber");

                Console.WriteLine($"Session data - fullName: '{fullName}', email: '{email}', program: '{program}'");

                if (!string.IsNullOrEmpty(userIdString) && int.TryParse(userIdString, out userId))
                {
                    Console.WriteLine("Creating CurrentUserDto from session storage");
                    currentUser = new CurrentUserDto
                    {
                        Id = userId,
                        FullName = fullName ?? "",
                        Email = email ?? "",
                        Program = program ?? "",
                        YearLevel = yearLevel ?? "",
                        StudentNumber = studentNumber ?? "",
                        CampusLocation = Enum.TryParse<CampusLocation>(campus, out var cl) ? cl : CampusLocation.MainCampus,
                        CreatedAt = DateTime.UtcNow
                    };
                    Console.WriteLine($"Created currentUser from session: {currentUser.FullName}");
                }
                else
                {
                    Console.WriteLine("Failed to create currentUser - userId still invalid");
                }
            }

            Console.WriteLine($"=== LoadUserProfile END - currentUser is {(currentUser != null ? "SET" : "NULL")} ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR in LoadUserProfile: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }

    private async Task LoadUserListings()
    {
        try
        {
            if (currentUser != null)
            {
                var result = await MarketplaceService.GetUserListingsAsync(currentUser.Id);

                if (result.IsSuccess)
                {
                    userListings = result.Value; 

                    if (userListings.Any())
                    {
                        activeListings = userListings.Where(listing =>
                        {
                            var numericStatus = Convert.ToInt32(listing.Status);
                            return numericStatus == (int)MarketplaceItemStatus.Active ||
                                   numericStatus == 0;
                        }).ToList();

                        soldListings = userListings.Where(listing =>
                        {
                            var numericStatus = Convert.ToInt32(listing.Status);
                            return numericStatus == (int)MarketplaceItemStatus.Sold;
                        }).ToList();
                    }
                    else
                    {
                        activeListings = new List<MarketplaceItemDto>();
                        soldListings = new List<MarketplaceItemDto>();
                    }

                    soldItemsCount = soldListings?.Count ?? 0;
                }
                else
                {
                    var error = result.Errors.FirstOrDefault();
                    listingErrorMessage = error?.Message ?? "Failed to load listings";
                    Console.WriteLine($"Error loading listings: {listingErrorMessage}");

                    userListings = new List<MarketplaceItemDto>();
                    activeListings = new List<MarketplaceItemDto>();
                    soldListings = new List<MarketplaceItemDto>();
                    soldItemsCount = 0;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading listings: {ex.Message}");
            listingErrorMessage = $"Error loading listings: {ex.Message}";

            userListings = new List<MarketplaceItemDto>();
            activeListings = new List<MarketplaceItemDto>();
            soldListings = new List<MarketplaceItemDto>();
            soldItemsCount = 0;
        }
    }

    private async Task LoadUserLikedItems()
    {
        try
        {
            if (currentUser != null)
            {
                var result = await MarketplaceService.GetUserWishlistAsync(currentUser.Id);

                if (result.IsSuccess)
                {
                    likedItems = result.Value;
                    availableLikedItems = likedItems.Count(item => item.Status == MarketplaceItemStatus.Active);
                }
                else
                {
                    likedErrorMessage = result.Errors.FirstOrDefault()?.Message ?? "Error loading liked items";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading liked items: {ex.Message}");
            likedErrorMessage = $"Error loading liked items: {ex.Message}";
        }
    }

    private async Task LoadBookmarkedEvents()
    {
        try
        {
            if (currentUser != null)
            {
                var result = await EventService.GetBookmarkedEventsAsync(currentUser.Id);

                if (result.IsSuccess)
                {
                    bookmarkedEvents = result.Value;
                }
                else
                {
                    eventsErrorMessage = result.Errors.FirstOrDefault()?.Message ?? "Error loading bookmarked events";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading bookmarked events: {ex.Message}");
            eventsErrorMessage = $"Error loading bookmarked events: {ex.Message}";
        }
    }

    private async Task RemoveFromLikes(int itemId)
    {
        try
        {
            if (currentUser != null)
            {
                var result = await MarketplaceService.RemoveFromWishlistAsync(itemId, currentUser.Id);

                if (result.IsSuccess && result.Value)
                {
                    likedItems = likedItems.Where(item => item.Id != itemId).ToList();
                    availableLikedItems = likedItems.Count(item => item.Status == MarketplaceItemStatus.Active);
                    likedSuccessMessage = "Item removed from your liked items!";
                    _ = Task.Delay(3000).ContinueWith(_ =>
                    {
                        likedSuccessMessage = null;
                        InvokeAsync(StateHasChanged);
                    });
                }
                else
                {
                    likedErrorMessage = result.IsSuccess
                        ? "Failed to remove item from liked items. Please try again."
                        : result.Errors.First().Message;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing from likes: {ex.Message}");
            likedErrorMessage = $"Error removing from likes: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ToggleBookmark(int eventId)
    {
        try
        {
            if (currentUser != null)
            {
                var result = await EventService.ToggleBookmarkEventAsync(eventId, currentUser.Id);

                if (result.IsSuccess)
                {
                    var eventItem = bookmarkedEvents.FirstOrDefault(e => e.Id == eventId);
                    if (eventItem != null)
                    {
                        eventItem.IsBookmarked = !eventItem.IsBookmarked;
                        if (!eventItem.IsBookmarked)
                        {
                            bookmarkedEvents = bookmarkedEvents.Where(e => e.Id != eventId).ToList();
                            eventsSuccessMessage = "Event removed from bookmarks!";
                        }
                        else
                        {
                            eventsSuccessMessage = "Event added to bookmarks!";
                        }
                        _ = Task.Delay(3000).ContinueWith(_ =>
                        {
                            eventsSuccessMessage = null;
                            InvokeAsync(StateHasChanged);
                        });
                    }
                }
                else
                {
                    eventsErrorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to toggle bookmark";
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling bookmark: {ex.Message}");
            eventsErrorMessage = $"Error toggling bookmark: {ex.Message}";
            StateHasChanged();
        }
    }

    private void ShowEventModal(EventDto eventItem)
    {
        selectedEvent = eventItem;
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        selectedEvent = null;
        StateHasChanged();
    }

    private void ShowProfileTab(string tabName)
    {
        activeTab = tabName;

        if (tabName == "liked")
        {
            _ = Task.Run(async () =>
            {
                await LoadUserLikedItems();
                await InvokeAsync(StateHasChanged);
            });
        }
        else if (tabName == "events")
        {
            _ = Task.Run(async () =>
            {
                await LoadBookmarkedEvents();
                await InvokeAsync(StateHasChanged);
            });
        }

        StateHasChanged();
    }

    private void EnableEditMode()
    {
        isEditMode = true;
        errorMessage = null;
        successMessage = null;
        validationErrors.Clear();

        editUser = new UpdateUserProfileDto
        {
            Id = currentUser!.Id,
            FullName = currentUser.FullName,
            StudentNumber = currentUser.StudentNumber,
            Email = currentUser.Email,
            ContactNumber = currentUser.ContactNumber,
            Program = currentUser.Program,
            YearLevel = currentUser.YearLevel,
            ProfilePictureUrl = currentUser.ProfilePictureUrl
        };

        StateHasChanged();
    }

    private void CancelEdit()
    {
        isEditMode = false;
        errorMessage = null;
        successMessage = null;
        validationErrors.Clear();
        editUser = new UpdateUserProfileDto();
        StateHasChanged();
    }

    private async Task SaveProfile()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Save Changes?",
            Text = "Are you sure you want to save these changes to your profile?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, save it!",
            CancelButtonText = "Cancel",
            ConfirmButtonColor = "#3b82f6",
            CancelButtonColor = "#6b7280"
        });

        if (!result.IsConfirmed) return;

        if (!ValidateInput())
        {
            Console.WriteLine("Validation failed");
            return;
        }

        isSaving = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            Console.WriteLine("Calling UpdateUserProfileAsync");
            var updateResult = await UserService.UpdateUserProfileAsync(editUser);
            Console.WriteLine($"UpdateUserProfileAsync result: {updateResult.IsSuccess}");

            if (updateResult.IsSuccess && updateResult.Value)
            {
                currentUser!.FullName = editUser.FullName;
                currentUser.StudentNumber = editUser.StudentNumber;
                currentUser.Email = editUser.Email;
                currentUser.ContactNumber = editUser.ContactNumber;
                currentUser.Program = editUser.Program;
                currentUser.YearLevel = editUser.YearLevel;
                currentUser.UpdatedAt = DateTime.UtcNow;

                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "fullName", currentUser.FullName);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "email", currentUser.Email);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "program", currentUser.Program);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "yearLevel", currentUser.YearLevel);

                isEditMode = false;
                successMessage = "Profile updated successfully!";

                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = null;
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                errorMessage = updateResult.Errors.FirstOrDefault()?.Message ?? "Failed to update profile. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SaveProfile: {ex.Message}");
            errorMessage = $"Error updating profile: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private string GetEventImagePath(string imagePath)
    {
        if (string.IsNullOrEmpty(imagePath))
            return "/images/events/default-event.jpg";

        return $"/uploads/events/{imagePath}";
    }

    private string GetEventPriorityClass(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "text-[10px] font-semibold bg-lime-500 text-white rounded-full px-2 py-0.5 flex items-center gap-1",
            "medium" => "text-[10px] font-semibold bg-gray-500 text-white rounded-full px-2 py-0.5 flex items-center gap-1",
            "low" => "text-[10px] font-semibold bg-gray-300 text-gray-700 rounded-full px-2 py-0.5 flex items-center gap-1",
            _ => "text-[10px] font-semibold bg-gray-400 text-white rounded-full px-2 py-0.5 flex items-center gap-1"
        };
    }

    private string GetEventCollegeBadgeClass(int collegeId)
    {
        return collegeId switch
        {
            1 => "flex items-center gap-1 bg-yellow-100 text-yellow-600 rounded-md px-2 py-0.5 text-[10px]",
            2 => "flex items-center gap-1 bg-red-100 text-red-600 rounded-md px-2 py-0.5 text-[10px]",
            3 => "flex items-center gap-1 bg-green-100 text-green-600 rounded-md px-2 py-0.5 text-[10px]",
            4 => "flex items-center gap-1 bg-orange-100 text-orange-600 rounded-md px-2 py-0.5 text-[10px]",
            5 => "flex items-center gap-1 bg-purple-100 text-purple-600 rounded-md px-2 py-0.5 text-[10px]",
            6 => "flex items-center gap-1 bg-blue-100 text-blue-600 rounded-md px-2 py-0.5 text-[10px]",
            7 => "flex items-center gap-1 bg-indigo-100 text-indigo-600 rounded-md px-2 py-0.5 text-[10px]",
            _ => "flex items-center gap-1 bg-gray-100 text-gray-600 rounded-md px-2 py-0.5 text-[10px]"
        };
    }

    private string GetEventCampusBadgeClass(int campusLocationId)
    {
        return campusLocationId switch
        {
            1 => "flex items-center gap-1 bg-teal-100 text-teal-700 rounded-md px-2 py-0.5 text-[10px]",
            2 => "flex items-center gap-1 bg-pink-100 text-pink-700 rounded-md px-2 py-0.5 text-[10px]",
            3 => "flex items-center gap-1 bg-cyan-100 text-cyan-700 rounded-md px-2 py-0.5 text-[10px]",
            4 => "flex items-center gap-1 bg-emerald-100 text-emerald-700 rounded-md px-2 py-0.5 text-[10px]",
            _ => "flex items-center gap-1 bg-gray-100 text-gray-600 rounded-md px-2 py-0.5 text-[10px]"
        };
    }

    private string GetEventStatusBadge(CampusHub.Domain.Entities.EventStatus status)
    {
        return status switch
        {
            CampusHub.Domain.Entities.EventStatus.Upcoming => "text-[10px] font-semibold bg-blue-100 text-blue-600 rounded-full px-2 py-0.5",
            CampusHub.Domain.Entities.EventStatus.Ongoing => "text-[10px] font-semibold bg-green-100 text-green-600 rounded-full px-2 py-0.5",
            CampusHub.Domain.Entities.EventStatus.Ended => "text-[10px] font-semibold bg-gray-100 text-gray-600 rounded-full px-2 py-0.5",
            _ => "text-[10px] font-semibold bg-gray-100 text-gray-600 rounded-full px-2 py-0.5"
        };
    }

    private async Task ShowEditPopup(MarketplaceItemDto listing)
    {
        showEditPopup = true;
        listingErrorMessage = null;
        listingSuccessMessage = null;
        listingValidationErrors.Clear();

        editingListing = new UpdateMarketplaceItemDto
        {
            Id = listing.Id,
            Title = listing.Title,
            Description = listing.Description,
            Price = listing.Price,
            Category = listing.Category,
            Condition = listing.Condition,
            MeetupPreference = listing.MeetupPreference,
            Location = currentUser?.CampusLocation ?? CampusLocation.MainCampus,
            ImageUrl = listing.ImageUrl
        };

        await InvokeAsync(StateHasChanged);
    }

    private void CloseEditPopup()
    {
        showEditPopup = false;
        listingErrorMessage = null;
        listingSuccessMessage = null;
        listingValidationErrors.Clear();
        editingListing = new UpdateMarketplaceItemDto();
        StateHasChanged();
    }

    private async Task SaveListingEdit()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Update Listing?",
            Text = "Are you sure you want to save changes to this listing?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, update it!",
            CancelButtonText = "Cancel",
            ConfirmButtonColor = "#3b82f6",
            CancelButtonColor = "#6b7280"
        });

        if (!result.IsConfirmed) return;

        if (!ValidateListingInput())
            return;

        isEditingListing = true;
        listingErrorMessage = null;
        listingSuccessMessage = null;

        try
        {
            var updatedListing = await MarketplaceService.UpdateItemAsync(editingListing);

            if (updatedListing != null)
            {
                var listingToUpdate = activeListings.FirstOrDefault(l => l.Id == editingListing.Id);
                if (listingToUpdate != null)
                {
                    listingToUpdate.Title = editingListing.Title;
                    listingToUpdate.Description = editingListing.Description;
                    listingToUpdate.Price = editingListing.Price;
                    listingToUpdate.Category = editingListing.Category;
                    listingToUpdate.Condition = editingListing.Condition;
                    listingToUpdate.MeetupPreference = editingListing.MeetupPreference;
                    listingToUpdate.ImageUrl = editingListing.ImageUrl;
                    listingToUpdate.UpdatedAt = DateTime.UtcNow;
                }

                showEditPopup = false;
                listingSuccessMessage = "Listing updated successfully!";

                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    listingSuccessMessage = null;
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                listingErrorMessage = "Failed to update listing. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating listing: {ex.Message}");
            listingErrorMessage = $"Error updating listing: {ex.Message}";
        }
        finally
        {
            isEditingListing = false;
            StateHasChanged();
        }
    }

    private bool ValidateListingInput()
    {
        listingValidationErrors.Clear();

        if (string.IsNullOrWhiteSpace(editingListing.Title))
            listingValidationErrors["Title"] = "Title is required";
        else if (editingListing.Title.Length > 100)
            listingValidationErrors["Title"] = "Title cannot exceed 100 characters";

        if (string.IsNullOrWhiteSpace(editingListing.Description))
            listingValidationErrors["Description"] = "Description is required";
        else if (editingListing.Description.Length > 1000)
            listingValidationErrors["Description"] = "Description cannot exceed 1000 characters";

        if (editingListing.Price <= 0)
            listingValidationErrors["Price"] = "Price must be greater than 0";
        else if (editingListing.Price > 999999.99m)
            listingValidationErrors["Price"] = "Price cannot exceed ₱999,999.99";

        return !listingValidationErrors.Any();
    }

    private bool ValidateInput()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(editUser.FullName))
            validationErrors["FullName"] = "Full name is required";

        if (string.IsNullOrWhiteSpace(editUser.StudentNumber))
            validationErrors["StudentNumber"] = "Student number is required";

        if (string.IsNullOrWhiteSpace(editUser.Email))
            validationErrors["Email"] = "Email is required";
        else if (!IsValidEmail(editUser.Email))
            validationErrors["Email"] = "Please enter a valid email address";

        if (string.IsNullOrWhiteSpace(editUser.Program))
            validationErrors["Program"] = "Program is required";

        if (string.IsNullOrWhiteSpace(editUser.YearLevel))
            validationErrors["YearLevel"] = "Year level is required";

        return !validationErrors.Any();
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task MarkAsSold(int listingId)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Mark as Sold?",
            Text = "This will mark the item as sold and it will no longer appear in active listings.",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, mark as sold!",
            CancelButtonText = "Cancel",
            ConfirmButtonColor = "#22c55e",
            CancelButtonColor = "#6b7280"
        });

        if (!result.IsConfirmed) return;

        try
        {
            await MarketplaceService.UpdateItemStatusAsync(listingId, MarketplaceItemStatus.Sold);
            await LoadUserListings();
            listingSuccessMessage = "Item marked as sold!";
            StateHasChanged();

            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                listingSuccessMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking as sold: {ex.Message}");
            listingErrorMessage = $"Error marking as sold: {ex.Message}";
        }
    }

    private async Task MarkAsAvailable(int listingId)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Mark as Available?",
            Text = "This will make the item available for purchase again.",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, mark available!",
            CancelButtonText = "Cancel",
            ConfirmButtonColor = "#3b82f6",
            CancelButtonColor = "#6b7280"
        });

        if (!result.IsConfirmed) return;

        try
        {
            await MarketplaceService.UpdateItemStatusAsync(listingId, MarketplaceItemStatus.Active);
            await LoadUserListings();
            listingSuccessMessage = "Item marked as available!";
            StateHasChanged();

            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                listingSuccessMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking as available: {ex.Message}");
            listingErrorMessage = $"Error marking as available: {ex.Message}";
        }
    }

    private async Task DeleteListing(int listingId)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Delete Listing?",
            Text = "This action cannot be undone. Are you sure you want to delete this listing?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, delete it!",
            CancelButtonText = "Cancel",
            ConfirmButtonColor = "#ef4444",
            CancelButtonColor = "#6b7280",
            ReverseButtons = true
        });

        if (!result.IsConfirmed) return;

        if (currentUser == null)
        {
            listingErrorMessage = "You must be logged in to delete a listing.";
            return;
        }

        try
        {
            var deleteResult = await MarketplaceService.DeleteItemAsync(listingId, currentUser.Id);

            if (deleteResult.IsSuccess && deleteResult.Value)
            {
                listingSuccessMessage = "Listing deleted successfully!";
                activeListings = activeListings.Where(l => l.Id != listingId).ToList();
                soldListings = soldListings.Where(l => l.Id != listingId).ToList();
                userListings = userListings.Where(l => l.Id != listingId).ToList();
                StateHasChanged();

                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    listingSuccessMessage = null;
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                listingErrorMessage = deleteResult.IsSuccess
                    ? "Failed to delete listing. Please try again."
                    : deleteResult.Errors.First().Message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting listing: {ex.Message}");
            listingErrorMessage = $"Error deleting listing: {ex.Message}";
        }
    }

    private string GetInitials(string fullName)
    {
        if (string.IsNullOrEmpty(fullName)) return "??";

        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length >= 2
            ? $"{parts[0][0]}{parts[1][0]}".ToUpper()
            : parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.Days > 0) return $"{timeSpan.Days} day{(timeSpan.Days == 1 ? "" : "s")} ago";
        if (timeSpan.Hours > 0) return $"{timeSpan.Hours} hour{(timeSpan.Hours == 1 ? "" : "s")} ago";
        if (timeSpan.Minutes > 0) return $"{timeSpan.Minutes} minute{(timeSpan.Minutes == 1 ? "" : "s")} ago";
        return "Just now";
    }

    private string GetMeetupPreferenceName(MeetupPreference meetupPreference) => meetupPreference switch
    {
        MeetupPreference.CampusOnly => "Campus Only",
        MeetupPreference.NearCampus => "Near Campus",
        MeetupPreference.Flexible => "Flexible",
        _ => "Not Specified"
    };

    private string GetCategoryDisplayName(ItemCategory category) => category switch
    {
        ItemCategory.Electronics => "Electronics",
        ItemCategory.Books => "Books",
        ItemCategory.Clothing => "Clothing",
        ItemCategory.Furniture => "Furniture",
        ItemCategory.Sports => "Sports & Recreation",
        ItemCategory.Other => "Other",
        _ => category.ToString()
    };
}