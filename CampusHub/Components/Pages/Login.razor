@page "/"
@using CampusHub.Application.DTO
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@rendermode InteractiveServer

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <img alt="University of Caloocan City official logo with green ribbon and shield containing sun and torch"
                 class="university-logo"
                 height="80"
                 src="images/UCC_logo.png"
                 width="80" />
            <h1>Campus Hub</h1>
            <p class="login-subtitle">University of Caloocan City</p>
        </div>

        <div class="login-content">
            <div class="login-intro">
                <p class="portal-text">Student Portal Access</p>
            </div>

            <EditForm class="verification-form" Model="loginDto" OnValidSubmit="HandleValidSubmit" FormName="verification-form">
                <DataAnnotationsValidator />

                <div class="verification-header">
                    <h2 class="verification-title">Student Verification</h2>
                    <p class="verification-description">Enter your username and password to access the platform</p>
                </div>

                <div class="form-group">
                    <label for="username">Username</label>
                    <InputText id="username" @bind-Value="loginDto.Username" />
                    <ValidationMessage For="@(() => loginDto.Username)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" @bind-Value="loginDto.Password" />
                    <ValidationMessage For="@(() => loginDto.Password)" />
                </div>

                <button class="btn btn-primary btn-large" type="submit" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Logging in...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>

                <p class="signup-text">
                    Don't have an account?
                    <NavLink href="/register" style="color: var(--primary-green); text-decoration: none; font-weight: 500;">Sign Up</NavLink>
                </p>

                @if (!string.IsNullOrEmpty(loginError))
                {
                    <div class="badge badge-destructive">@loginError</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="badge badge-primary">@successMessage</div>
                }

                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>


@code {
    private LoginDto loginDto = new LoginDto();
    private string loginError = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleValidSubmit()
    {
        loginError = string.Empty;
        successMessage = string.Empty;
        isLoading = true;

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/auth/login", loginDto);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
                if (result != null)
                {
                    successMessage = "Login successful!";
                    StateHasChanged();

                    await StoreUserSession(result);

                    await Task.Delay(500);
                    NavigationManager.NavigateTo("/main-marketplace");
                }
                else
                {
                    loginError = "Invalid response from server.";
                }
            }
            else
            {
                // Parse error response
                try
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    var errorResponse = JsonSerializer.Deserialize<JsonElement>(errorContent);

                    if (errorResponse.TryGetProperty("message", out var messageProperty))
                    {
                        loginError = messageProperty.GetString() ?? "Login failed. Please check your credentials.";
                    }
                    else
                    {
                        loginError = "Login failed. Please check your credentials.";
                    }
                }
                catch
                {
                    loginError = response.StatusCode switch
                    {
                        System.Net.HttpStatusCode.Unauthorized => "Invalid credentials. Please check your username and password.",
                        System.Net.HttpStatusCode.BadRequest => "Invalid login data. Please check your input.",
                        _ => "Login failed. Please try again."
                    };
                }
            }
        }
        catch (HttpRequestException ex)
        {
            loginError = "Network error occurred. Please check your connection and try again.";
            Console.WriteLine($"Network error during login: {ex.Message}");
        }
        catch (TaskCanceledException ex)
        {
            loginError = "The request timed out. Please try again.";
            Console.WriteLine($"Timeout during login: {ex.Message}");
        }
        catch (Exception ex)
        {
            loginError = "An unexpected error occurred. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task StoreUserSession(LoginResponseDto loginResponse)
    {
        try
        {
            // Store user data in sessionStorage
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userId", loginResponse.UserId.ToString());
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "username", loginResponse.Username);
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "fullName", loginResponse.FullName);
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "role", loginResponse.Role);
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "email", loginResponse.Email ?? "");
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "isAuthenticated", "true");

            Console.WriteLine($"Successfully stored user session for UserId: {loginResponse.UserId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error storing user session: {ex.Message}");
            loginError = "Error saving login session. Please try again.";
        }
    }
}